cmake_minimum_required(VERSION 3.0)

project(Voxel3D)

set(SOURCE 
    main.cpp 
	window.cpp 
	input.cpp 
	graphics/shader.cpp
	graphics/texture.cpp
	graphics/mesh.cpp
	graphics/voxelrenderer.cpp
	voxels/chunk.cpp
	loaders/png_loading.cpp
	loaders/vox_loading.cpp
	camera.cpp
)

set(HEADER
    window.h
	input.h 
	graphics/shader.h 
	graphics/texture.h 
	graphics/mesh.h
	graphics/voxelrenderer.h
	voxels/voxel.h
	voxels/chunk.h
	loaders/png_loading.h
	loaders/vox_loading.h
	camera.h
)

find_package(PNG REQUIRED)
if(NOT PNG_FOUND)
	message(SEND_ERROR "Failed to find PNG")
	return()
else()
	include_directories(${PNG_INCLUDE_DIR})
endif()

find_package(GLEW REQUIRED)
if(NOT GLEW_FOUND)
	message(SEND_ERROR "Failed to find GLEW")
	return()
else()
	include_directories(${GLEW_INCLUDE_DIR})
endif()

find_package(glfw3 3.3 REQUIRED)
if(NOT glfw3_FOUND)
	message(SEND_ERROR "Failed to find GLFW")
	return()
else()
	include_directories(${glfw3_INCLUDE_DIR})
endif()

find_package(OpenGL REQUIRED)
if(NOT OpenGL_FOUND)
	message(SEND_ERROR "Failed to find OpenGL")
	return()
else()
	include_directories(${OpenGL_INCLUDE_DIR})
endif()
find_package(GLU REQUIRED)

add_executable(engine ${SOURCE})

target_link_libraries(engine 
glfw
${PNG_LIBRARY}
${GLEW_LIBRARIES}
${OPENGL_gl_LIBRARY}
${GLU_LIBRARY}
)
